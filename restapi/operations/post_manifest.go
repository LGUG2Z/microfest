// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/LGUG2Z/microfest/models"
)

// PostManifestHandlerFunc turns a function with the right signature into a post manifest handler
type PostManifestHandlerFunc func(PostManifestParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostManifestHandlerFunc) Handle(params PostManifestParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostManifestHandler interface for that can handle valid post manifest params
type PostManifestHandler interface {
	Handle(PostManifestParams, *models.Principal) middleware.Responder
}

// NewPostManifest creates a new http.Handler for the post manifest operation
func NewPostManifest(ctx *middleware.Context, handler PostManifestHandler) *PostManifest {
	return &PostManifest{Context: ctx, Handler: handler}
}

/*PostManifest swagger:route POST /manifest postManifest

Submits a new manifest

*/
type PostManifest struct {
	Context *middleware.Context
	Handler PostManifestHandler
}

func (o *PostManifest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostManifestParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostManifestBody post manifest body
// swagger:model PostManifestBody
type PostManifestBody struct {

	// manifest
	// Required: true
	Manifest interface{} `json:"manifest"`

	// release
	// Required: true
	Release *string `json:"release"`

	// updated
	// Required: true
	Updated []string `json:"updated"`
}

// Validate validates this post manifest body
func (o *PostManifestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostManifestBody) validateManifest(formats strfmt.Registry) error {

	if err := validate.Required("microfest"+"."+"manifest", "body", o.Manifest); err != nil {
		return err
	}

	return nil
}

func (o *PostManifestBody) validateRelease(formats strfmt.Registry) error {

	if err := validate.Required("microfest"+"."+"release", "body", o.Release); err != nil {
		return err
	}

	return nil
}

func (o *PostManifestBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("microfest"+"."+"updated", "body", o.Updated); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostManifestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostManifestBody) UnmarshalBinary(b []byte) error {
	var res PostManifestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
