// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostConfigurationParams creates a new PostConfigurationParams object
// no default values defined in spec.
func NewPostConfigurationParams() PostConfigurationParams {

	return PostConfigurationParams{}
}

// PostConfigurationParams contains all the bound params for the post configuration operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostConfiguration
type PostConfigurationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The configuration to submit
	  In: body
	*/
	Configuration interface{}
	/*The environment hostname
	  Required: true
	  In: query
	*/
	Host string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostConfigurationParams() beforehand.
func (o *PostConfigurationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body interface{}
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("configuration", "body", "", err))
		} else {
			// no validation on generic interface
			o.Configuration = body
		}
	}
	qHost, qhkHost, _ := qs.GetOK("host")
	if err := o.bindHost(qHost, qhkHost, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindHost binds and validates parameter Host from query.
func (o *PostConfigurationParams) bindHost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("host", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("host", "query", raw); err != nil {
		return err
	}

	o.Host = raw

	return nil
}
