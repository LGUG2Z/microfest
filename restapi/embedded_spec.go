// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Micro Application Manifest and Configuration Manager",
    "title": "Microfest",
    "contact": {
      "name": "J. Iqbal",
      "url": "https://github.com/LGUG2Z/microfest",
      "email": "jade@beamery.com"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/configuration": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Gets the configuration",
        "operationId": "GetConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/Host"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "summary": "Submits a new configuration",
        "operationId": "PostConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/Host"
          },
          {
            "$ref": "#/parameters/Configuration"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ConfigurationCreated"
          },
          "400": {
            "$ref": "#/responses/BadRequestBody"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/manifest": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Gets the manifest",
        "operationId": "GetManifest",
        "parameters": [
          {
            "$ref": "#/parameters/Host"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "summary": "Submits a patch to create a new manifest",
        "operationId": "PutManifest",
        "parameters": [
          {
            "$ref": "#/parameters/Host"
          },
          {
            "$ref": "#/parameters/Manifest"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ManifestCreated"
          },
          "400": {
            "$ref": "#/responses/BadRequestBody"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "summary": "Submits a new manifest",
        "operationId": "PostManifest",
        "parameters": [
          {
            "$ref": "#/parameters/Host"
          },
          {
            "$ref": "#/parameters/Manifest"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/ManifestCreated"
          },
          "400": {
            "description": "Bad Request Body"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "principal": {
      "type": "string"
    }
  },
  "parameters": {
    "Configuration": {
      "description": "The configuration to submit",
      "name": "configuration",
      "in": "body",
      "schema": {
        "type": "object"
      }
    },
    "Host": {
      "type": "string",
      "description": "The environment hostname",
      "name": "host",
      "in": "query",
      "required": true
    },
    "Manifest": {
      "description": "The manifest to submit",
      "name": "manifest",
      "in": "body",
      "schema": {
        "type": "object"
      }
    }
  },
  "responses": {
    "BadRequestBody": {
      "description": "Bad Request Body"
    },
    "ConfigurationCreated": {
      "description": "Configuration Created",
      "schema": {
        "type": "string"
      }
    },
    "InternalServerError": {
      "description": "Internal Server Error",
      "schema": {
        "type": "string"
      }
    },
    "ManifestCreated": {
      "description": "Manifest Created",
      "schema": {
        "type": "string"
      }
    },
    "NotFound": {
      "description": "Not Found",
      "schema": {
        "type": "string"
      }
    },
    "OK": {
      "description": "OK",
      "schema": {
        "description": "The JSON artifact",
        "type": "object"
      },
      "headers": {
        "Cache-Control": {
          "type": "string",
          "description": "Cache-Control"
        }
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Authorization information is missing or invalid"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Micro Application Manifest and Configuration Manager",
    "title": "Microfest",
    "contact": {
      "name": "J. Iqbal",
      "url": "https://github.com/LGUG2Z/microfest",
      "email": "jade@beamery.com"
    },
    "version": "0.0.1"
  },
  "paths": {
    "/configuration": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Gets the configuration",
        "operationId": "GetConfiguration",
        "parameters": [
          {
            "type": "string",
            "description": "The environment hostname",
            "name": "host",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "The JSON artifact",
              "type": "object"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "Cache-Control"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Authorization information is missing or invalid"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "summary": "Submits a new configuration",
        "operationId": "PostConfiguration",
        "parameters": [
          {
            "type": "string",
            "description": "The environment hostname",
            "name": "host",
            "in": "query",
            "required": true
          },
          {
            "description": "The configuration to submit",
            "name": "configuration",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Configuration Created",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request Body"
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Authorization information is missing or invalid"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/manifest": {
      "get": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Gets the manifest",
        "operationId": "GetManifest",
        "parameters": [
          {
            "type": "string",
            "description": "The environment hostname",
            "name": "host",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "The JSON artifact",
              "type": "object"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "Cache-Control"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Authorization information is missing or invalid"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "summary": "Submits a patch to create a new manifest",
        "operationId": "PutManifest",
        "parameters": [
          {
            "type": "string",
            "description": "The environment hostname",
            "name": "host",
            "in": "query",
            "required": true
          },
          {
            "description": "The manifest to submit",
            "name": "manifest",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Manifest Created",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request Body"
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Authorization information is missing or invalid"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "summary": "Submits a new manifest",
        "operationId": "PostManifest",
        "parameters": [
          {
            "type": "string",
            "description": "The environment hostname",
            "name": "host",
            "in": "query",
            "required": true
          },
          {
            "description": "The manifest to submit",
            "name": "manifest",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Manifest Created",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request Body"
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "WWW-Authenticate": {
                "type": "string",
                "description": "Authorization information is missing or invalid"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "principal": {
      "type": "string"
    }
  },
  "parameters": {
    "Configuration": {
      "description": "The configuration to submit",
      "name": "configuration",
      "in": "body",
      "schema": {
        "type": "object"
      }
    },
    "Host": {
      "type": "string",
      "description": "The environment hostname",
      "name": "host",
      "in": "query",
      "required": true
    },
    "Manifest": {
      "description": "The manifest to submit",
      "name": "manifest",
      "in": "body",
      "schema": {
        "type": "object"
      }
    }
  },
  "responses": {
    "BadRequestBody": {
      "description": "Bad Request Body"
    },
    "ConfigurationCreated": {
      "description": "Configuration Created",
      "schema": {
        "type": "string"
      }
    },
    "InternalServerError": {
      "description": "Internal Server Error",
      "schema": {
        "type": "string"
      }
    },
    "ManifestCreated": {
      "description": "Manifest Created",
      "schema": {
        "type": "string"
      }
    },
    "NotFound": {
      "description": "Not Found",
      "schema": {
        "type": "string"
      }
    },
    "OK": {
      "description": "OK",
      "schema": {
        "description": "The JSON artifact",
        "type": "object"
      },
      "headers": {
        "Cache-Control": {
          "type": "string",
          "description": "Cache-Control"
        }
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Authorization information is missing or invalid"
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "name": "X-API-KEY",
      "in": "header"
    }
  }
}`))
}
